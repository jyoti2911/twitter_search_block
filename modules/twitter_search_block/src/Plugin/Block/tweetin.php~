<?php
/**
* @file
* Contains \Drupal\tweet_hash\Plugin\Block\tweetin.
*/
namespace Drupal\tweet_hash\Plugin\Block;
use Drupal\Core\Block\BlockBase;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\block\BlockInterface;
require_once('TwitterAPIExchange.php');//libarry used by twitter to process the Rest API with the respective variables

/**
* Provides my custom block.
*
* @Block(
* id = "tweet_block",
* admin_label = @Translation("tweet block"),
* category = @Translation("Blocks")
* )
*/
class tweetin extends BlockBase implements BlockPluginInterface{
/**
* {@inheritdoc}
 * 
*/
 public function getCacheMaxAge() {
$max_age = 0;
return $this->cacheMaxAge;
} 
public function build() {
    
    $config = \Drupal::config('tweet_hash.settings');//Settings file for the module to store the credentials for twitter account
    $node = \Drupal::request()->attributes->get('node');
        $settings = array(
                 'oauth_access_token' => $config->get('oauth_access_token'),
                 'oauth_access_token_secret' => $config->get('oauth_access_token_secret'),
                 'consumer_key' => $config->get('consumer_key'),
                 'consumer_secret' => $config->get('consumer_secret')
                );
        //if one hash value for tweet exists
        if (! empty ($node->field_hash[0]->value ) && empty($node->field_hash[1]->value) && empty($node->field_hash[2]->value)){
            $hash_value=$node->field_hash[0]->value;
            $result= tweetin::tweet_api($hash_value,$settings,3);
       return array(
       '#children' => $result,
       '#cache' => array(
        'max-age' => 0,
      ),
    );
}//first if condition ends
if (! empty ($node->field_hash[0]->value ) && !empty($node->field_hash[1]->value) && empty($node->field_hash[2]->value)) {
        $hash_value1=$node->field_hash[0]->value;
        $hash_value2=$node->field_hash[1]->value;
        $return_value_1= tweetin::tweet_api($hash_value1,$settings,2);
        $return_value_2= tweetin::tweet_api($hash_value2,$settings,1);
        $result='';
        $result=$return_value_1.$return_value_2;
       return array(
       '#children' => $result,
       '#cache' => array(
        'max-age' => 0,
      ),
    );
}
if (! empty ($node->field_hash[0]->value ) && !empty($node->field_hash[1]->value) && !empty($node->field_hash[2]->value)) {
        $hash_value1=$node->field_hash[0]->value;
        $hash_value2=$node->field_hash[1]->value;
        $hash_value3=$node->field_hash[2]->value;
        $return_value_1= tweetin::tweet_api($hash_value1,$settings,1);
        $return_value_2= tweetin::tweet_api($hash_value2,$settings,1);
        $return_value_3= tweetin::tweet_api($hash_value3,$settings,1);
        $result=$return_value_1.$return_value_2.$return_value_3;
       return array(
       '#children' => $result,
       '#cache' => array(
        'max-age' => 0,
      ),
    );
}
}


//function to get the latest 3 tweets on basis of hashtags 
public function tweet_api($hash_value_one,$settings,$count)
{
    $output = ''; 
/** URL for REST request, see: https://dev.twitter.com/docs/api/1.1/ **/
$url = 'https://api.twitter.com/1.1/search/tweets.json';
$requestMethod = 'GET';
$getfield = '?q='. $hash_value_one.'&count='.$count.'&result_type=recent';

$twitter = new TwitterAPIExchange($settings);
$api_response=$twitter ->setGetfield($getfield)
                ->buildOauth($url, $requestMethod)
               ->performRequest();

$response = json_decode($api_response);                     
foreach($response->statuses as $tweetinn)
{
  $tweet_id=$tweetinn->id_str;
  $url = 'https://api.twitter.com/1.1/statuses/oembed.json';//twitter Rest Api to get the embedded tweet
  $requestMethod = 'GET';
  $getfield = '?id='.$tweet_id.'&hide_media=true&maxwidth=260&hide_thread=true';
  $twitter1 = new TwitterAPIExchange($settings);
  $api_response1=$twitter1->setGetfield($getfield)
                ->buildOauth($url, $requestMethod)
                ->performRequest();

  $response1 = json_decode($api_response1);
  $output .= $response1->html;
  
  }
  return $output;
}
}
